//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `RestaurantsViewController`, and contains static references to 1 segues.
    struct restaurantsViewController {
      /// Segue identifier `showViewController`.
      static let showViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RestaurantsViewController, RestaurantsDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showViewController")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `showViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RestaurantsViewController, RestaurantsDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.restaurantsViewController.showViewController, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `Boarder`.
    static let boarder = Rswift.ColorResource(bundle: R.hostingBundle, name: "Boarder")
    /// Color `OrangeOne`.
    static let orangeOne = Rswift.ColorResource(bundle: R.hostingBundle, name: "OrangeOne")
    /// Color `OrangeTwo`.
    static let orangeTwo = Rswift.ColorResource(bundle: R.hostingBundle, name: "OrangeTwo")
    /// Color `sosButtonBackground`.
    static let sosButtonBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "sosButtonBackground")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Boarder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func boarder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.boarder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OrangeOne", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeOne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeOne, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "OrangeTwo", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeTwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeTwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "sosButtonBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func sosButtonBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.sosButtonBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Boarder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func boarder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.boarder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "OrangeOne", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orangeOne(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orangeOne.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "OrangeTwo", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orangeTwo(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orangeTwo.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "sosButtonBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func sosButtonBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.sosButtonBackground.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 12 files.
  struct file {
    /// Resource file `Roboto-Black.ttf`.
    static let robotoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Black", pathExtension: "ttf")
    /// Resource file `Roboto-BlackItalic.ttf`.
    static let robotoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BlackItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Thin.ttf`.
    static let robotoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Thin", pathExtension: "ttf")
    /// Resource file `Roboto-ThinItalic.ttf`.
    static let robotoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-ThinItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "Roboto-Black", withExtension: "ttf")`
    static func robotoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BlackItalic", withExtension: "ttf")`
    static func robotoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Thin", withExtension: "ttf")`
    static func robotoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-ThinItalic", withExtension: "ttf")`
    static func robotoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")

    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }

    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }

    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `LogoInApp`.
    static let logoInApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "LogoInApp")
    /// Image `MenuLogo`.
    static let menuLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "MenuLogo")
    /// Image `StarEmpty`.
    static let starEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarEmpty")
    /// Image `StarFiled`.
    static let starFiled = Rswift.ImageResource(bundle: R.hostingBundle, name: "StarFiled")
    /// Image `Star_rating_0.5_of_5`.
    static let star_rating_05_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_0.5_of_5")
    /// Image `Star_rating_0_of_5`.
    static let star_rating_0_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_0_of_5")
    /// Image `Star_rating_1.5_of_5`.
    static let star_rating_15_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_1.5_of_5")
    /// Image `Star_rating_1_of_5`.
    static let star_rating_1_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_1_of_5")
    /// Image `Star_rating_2.5_of_5`.
    static let star_rating_25_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_2.5_of_5")
    /// Image `Star_rating_2_of_5`.
    static let star_rating_2_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_2_of_5")
    /// Image `Star_rating_3.5_of_5`.
    static let star_rating_35_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_3.5_of_5")
    /// Image `Star_rating_3_of_5`.
    static let star_rating_3_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_3_of_5")
    /// Image `Star_rating_4.5_of_5`.
    static let star_rating_45_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_4.5_of_5")
    /// Image `Star_rating_4_of_5`.
    static let star_rating_4_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_4_of_5")
    /// Image `Star_rating_5_of_5`.
    static let star_rating_5_of_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star_rating_5_of_5")
    /// Image `icClosingCross`.
    static let icClosingCross = Rswift.ImageResource(bundle: R.hostingBundle, name: "icClosingCross")
    /// Image `mapLogo`.
    static let mapLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapLogo")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `reviewLogo`.
    static let reviewLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "reviewLogo")
    /// Image `sosButton`.
    static let sosButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "sosButton")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LogoInApp", bundle: ..., traitCollection: ...)`
    static func logoInApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoInApp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MenuLogo", bundle: ..., traitCollection: ...)`
    static func menuLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarEmpty", bundle: ..., traitCollection: ...)`
    static func starEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starEmpty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StarFiled", bundle: ..., traitCollection: ...)`
    static func starFiled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starFiled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_0.5_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_05_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_05_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_0_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_0_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_0_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_1.5_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_15_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_15_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_1_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_1_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_1_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_2.5_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_25_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_25_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_2_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_2_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_2_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_3.5_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_35_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_35_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_3_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_3_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_3_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_4.5_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_45_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_45_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_4_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_4_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_4_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Star_rating_5_of_5", bundle: ..., traitCollection: ...)`
    static func star_rating_5_of_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star_rating_5_of_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icClosingCross", bundle: ..., traitCollection: ...)`
    static func icClosingCross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icClosingCross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapLogo", bundle: ..., traitCollection: ...)`
    static func mapLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reviewLogo", bundle: ..., traitCollection: ...)`
    static func reviewLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reviewLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sosButton", bundle: ..., traitCollection: ...)`
    static func sosButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sosButton, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `CollectionViewCell`.
    static let collectionViewCell = _R.nib._CollectionViewCell()
    /// Nib `TableViewCellHeaderTableViewCell`.
    static let tableViewCellHeaderTableViewCell = _R.nib._TableViewCellHeaderTableViewCell()
    /// Nib `TableViewCellReview`.
    static let tableViewCellReview = _R.nib._TableViewCellReview()
    /// Nib `TableViewMain`.
    static let tableViewMain = _R.nib._TableViewMain()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.collectionViewCell) instead")
    static func collectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.collectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TableViewCellHeaderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tableViewCellHeaderTableViewCell) instead")
    static func tableViewCellHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tableViewCellHeaderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TableViewCellReview", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tableViewCellReview) instead")
    static func tableViewCellReview(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tableViewCellReview)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TableViewMain", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tableViewMain) instead")
    static func tableViewMain(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tableViewMain)
    }
    #endif

    static func collectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollectionViewCell? {
      return R.nib.collectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollectionViewCell
    }

    static func tableViewCellHeaderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TableViewCellHeaderTableViewCell? {
      return R.nib.tableViewCellHeaderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TableViewCellHeaderTableViewCell
    }

    static func tableViewCellReview(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TableViewCellReview? {
      return R.nib.tableViewCellReview.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TableViewCellReview
    }

    static func tableViewMain(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TableViewMain? {
      return R.nib.tableViewMain.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TableViewMain
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MyCollectionViewCell`.
    static let myCollectionViewCell: Rswift.ReuseIdentifier<MyCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MyCollectionViewCell")
    /// Reuse identifier `collectionViewID`.
    static let collectionViewID: Rswift.ReuseIdentifier<CollectionViewCell> = Rswift.ReuseIdentifier(identifier: "collectionViewID")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 5 localization tables.
  struct string {
    /// This `R.string.alerts` struct is generated, and contains static references to 6 localization keys.
    struct alerts {
      /// Value: Cлужба эвакуации
      static let evacuationService = Rswift.StringResource(key: "EvacuationService", tableName: "Alerts", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Обновить
      static let update = Rswift.StringResource(key: "Update", tableName: "Alerts", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ок
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Alerts", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отзыв отправлен
      static let reviewSend = Rswift.StringResource(key: "ReviewSend", tableName: "Alerts", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Спасибо за оценку
      static let thanksForReview = Rswift.StringResource(key: "ThanksForReview", tableName: "Alerts", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Точка погрузки
      static let pickUpPoint = Rswift.StringResource(key: "PickUpPoint", tableName: "Alerts", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Cлужба эвакуации
      static func evacuationService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EvacuationService", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "EvacuationService"
        }

        return NSLocalizedString("EvacuationService", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// Value: Обновить
      static func update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "Update"
        }

        return NSLocalizedString("Update", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// Value: Ок
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ok", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "Ok"
        }

        return NSLocalizedString("Ok", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// Value: Отзыв отправлен
      static func reviewSend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ReviewSend", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "ReviewSend"
        }

        return NSLocalizedString("ReviewSend", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// Value: Спасибо за оценку
      static func thanksForReview(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ThanksForReview", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "ThanksForReview"
        }

        return NSLocalizedString("ThanksForReview", tableName: "Alerts", bundle: bundle, comment: "")
      }

      /// Value: Точка погрузки
      static func pickUpPoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PickUpPoint", tableName: "Alerts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Alerts", preferredLanguages: preferredLanguages) else {
          return "PickUpPoint"
        }

        return NSLocalizedString("PickUpPoint", tableName: "Alerts", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.colors` struct is generated, and contains static references to 1 localization keys.
    struct colors {
      /// Value: sosButtonBackground
      static let sosButtonBackground = Rswift.StringResource(key: "sosButtonBackground", tableName: "Colors", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: sosButtonBackground
      static func sosButtonBackground(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sosButtonBackground", tableName: "Colors", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Colors", preferredLanguages: preferredLanguages) else {
          return "sosButtonBackground"
        }

        return NSLocalizedString("sosButtonBackground", tableName: "Colors", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.restaurantsReview` struct is generated, and contains static references to 1 localization keys.
    struct restaurantsReview {
      /// Value: Имя пользователя
      static let username = Rswift.StringResource(key: "Username", tableName: "RestaurantsReview", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Имя пользователя
      static func username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Username", tableName: "RestaurantsReview", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RestaurantsReview", preferredLanguages: preferredLanguages) else {
          return "Username"
        }

        return NSLocalizedString("Username", tableName: "RestaurantsReview", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.restaurants` struct is generated, and contains static references to 3 localization keys.
    struct restaurants {
      /// Value: ₽
      static let avarageCheckLow = Rswift.StringResource(key: "avarageCheckLow", tableName: "Restaurants", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ₽₽
      static let avarageCheckMedium = Rswift.StringResource(key: "avarageCheckMedium", tableName: "Restaurants", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ₽₽₽
      static let avarageCheckHigh = Rswift.StringResource(key: "avarageCheckHigh", tableName: "Restaurants", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: ₽
      static func avarageCheckLow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("avarageCheckLow", tableName: "Restaurants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Restaurants", preferredLanguages: preferredLanguages) else {
          return "avarageCheckLow"
        }

        return NSLocalizedString("avarageCheckLow", tableName: "Restaurants", bundle: bundle, comment: "")
      }

      /// Value: ₽₽
      static func avarageCheckMedium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("avarageCheckMedium", tableName: "Restaurants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Restaurants", preferredLanguages: preferredLanguages) else {
          return "avarageCheckMedium"
        }

        return NSLocalizedString("avarageCheckMedium", tableName: "Restaurants", bundle: bundle, comment: "")
      }

      /// Value: ₽₽₽
      static func avarageCheckHigh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("avarageCheckHigh", tableName: "Restaurants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Restaurants", preferredLanguages: preferredLanguages) else {
          return "avarageCheckHigh"
        }

        return NSLocalizedString("avarageCheckHigh", tableName: "Restaurants", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.towTruck` struct is generated, and contains static references to 4 localization keys.
    struct towTruck {
      /// Value: pin
      static let pin = Rswift.StringResource(key: "Pin", tableName: "TowTruck", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Данные переданы водителю, он спешит к вам
      static let requestSend = Rswift.StringResource(key: "RequestSend", tableName: "TowTruck", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Для вызова эвакуатора нужно отметить точку
      static let choosePickUpPoint = Rswift.StringResource(key: "ChoosePickUpPoint", tableName: "TowTruck", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Текущая локация
      static let currectLocation = Rswift.StringResource(key: "CurrectLocation", tableName: "TowTruck", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: pin
      static func pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pin", tableName: "TowTruck", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TowTruck", preferredLanguages: preferredLanguages) else {
          return "Pin"
        }

        return NSLocalizedString("Pin", tableName: "TowTruck", bundle: bundle, comment: "")
      }

      /// Value: Данные переданы водителю, он спешит к вам
      static func requestSend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RequestSend", tableName: "TowTruck", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TowTruck", preferredLanguages: preferredLanguages) else {
          return "RequestSend"
        }

        return NSLocalizedString("RequestSend", tableName: "TowTruck", bundle: bundle, comment: "")
      }

      /// Value: Для вызова эвакуатора нужно отметить точку
      static func choosePickUpPoint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ChoosePickUpPoint", tableName: "TowTruck", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TowTruck", preferredLanguages: preferredLanguages) else {
          return "ChoosePickUpPoint"
        }

        return NSLocalizedString("ChoosePickUpPoint", tableName: "TowTruck", bundle: bundle, comment: "")
      }

      /// Value: Текущая локация
      static func currectLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CurrectLocation", tableName: "TowTruck", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TowTruck", preferredLanguages: preferredLanguages) else {
          return "CurrectLocation"
        }

        return NSLocalizedString("CurrectLocation", tableName: "TowTruck", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CollectionViewCell.validate()
      try _TableViewCellHeaderTableViewCell.validate()
    }

    struct _CollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "collectionViewID"
      let name = "CollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "StarEmpty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StarEmpty' is used in nib 'CollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "StarFiled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StarFiled' is used in nib 'CollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TableViewCellHeaderTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TableViewCellHeaderTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TableViewCellHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TableViewCellHeaderTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "MenuLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MenuLogo' is used in nib 'TableViewCellHeaderTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mapLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapLogo' is used in nib 'TableViewCellHeaderTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "reviewLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'reviewLogo' is used in nib 'TableViewCellHeaderTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TableViewCellReview: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TableViewCellReview"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TableViewCellReview? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TableViewCellReview
      }

      fileprivate init() {}
    }

    struct _TableViewMain: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TableViewMain"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TableViewMain? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TableViewMain
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RestaurantsViewController

      let bundle = R.hostingBundle
      let name = "Main"
      let towTruckViewControllerID = StoryboardViewControllerResource<TowTruckViewController>(identifier: "TowTruckViewControllerID")
      let viewControllerID = StoryboardViewControllerResource<RestaurantsReviewViewController>(identifier: "ViewControllerID")
      let webViewControllerID = StoryboardViewControllerResource<WebViewCotroller>(identifier: "WebViewControllerID")

      func towTruckViewControllerID(_: Void = ()) -> TowTruckViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: towTruckViewControllerID)
      }

      func viewControllerID(_: Void = ()) -> RestaurantsReviewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewControllerID)
      }

      func webViewControllerID(_: Void = ()) -> WebViewCotroller? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewControllerID)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "LogoInApp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LogoInApp' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "StarEmpty", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StarEmpty' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "StarFiled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StarFiled' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icClosingCross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icClosingCross' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "location") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'location' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "location.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'location.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "sosButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sosButton' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Boarder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Boarder' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "OrangeOne", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'OrangeOne' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "OrangeTwo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'OrangeTwo' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().towTruckViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'towTruckViewControllerID' could not be loaded from storyboard 'Main' as 'TowTruckViewController'.") }
        if _R.storyboard.main().viewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewControllerID' could not be loaded from storyboard 'Main' as 'RestaurantsReviewViewController'.") }
        if _R.storyboard.main().webViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewControllerID' could not be loaded from storyboard 'Main' as 'WebViewCotroller'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
